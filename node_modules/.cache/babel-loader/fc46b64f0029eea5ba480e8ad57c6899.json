{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yuvan\\\\OneDrive\\\\Documents\\\\weatherApp-Reactjs-master\\\\weatherApp-Reactjs-master\\\\src\\\\Weather.js\";\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { defaults, dateBuilder } from \"./currentLocation\";\nexport class Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.getWeather = async (lat, lon) => {\n      const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n      const data = await api_call.json();\n      this.setState({\n        lat: lat,\n        lon: lon,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: data.weather[0].main,\n        country: data.sys.country // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n        // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n\n      });\n\n      switch (this.state.main) {\n        case \"Haze\":\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n          break;\n\n        case \"Clouds\":\n          this.setState({\n            icon: \"CLOUDY\"\n          });\n          break;\n\n        case \"Rain\":\n          this.setState({\n            icon: \"RAIN\"\n          });\n          break;\n\n        case \"Snow\":\n          this.setState({\n            icon: \"SNOW\"\n          });\n          break;\n\n        case \"Dust\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n\n        case \"Drizzle\":\n          this.setState({\n            icon: \"SLEET\"\n          });\n          break;\n\n        case \"Fog\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n\n        case \"Smoke\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n\n        case \"Tornado\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n\n        default:\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition() //If user allow location service then will fetch data & send it to get-weather function.\n      .then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n        this.getWeather(28.67, 77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  } // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n\n  render() {\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"city\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }\n      }, this.state.city), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }\n      }, this.state.country)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, \" \", /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n        icon: this.state.icon,\n        color: defaults.color,\n        size: defaults.size,\n        animate: defaults.animate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, this.state.main)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"date-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dmy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Clock, {\n        format: \"HH:mm:ss\",\n        interval: 1000,\n        ticking: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"temperature\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }, this.state.temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 45\n        }\n      }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n        icon: this.state.icon,\n        weather: this.state.main,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: loader,\n        style: {\n          width: \"50%\",\n          WebkitUserDrag: \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          fontSize: \"22px\",\n          fontWeight: \"600\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          marginTop: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }\n      }, \"Your current location wil be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 63\n        }\n      }), \" & used for calculating Real time weather.\"));\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/yuvan/OneDrive/Documents/weatherApp-Reactjs-master/weatherApp-Reactjs-master/src/Weather.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","defaults","dateBuilder","Weather","Component","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","api_call","fetch","base","key","data","json","setState","name","Math","round","main","temp","weather","sys","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","color","size","animate","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport apiKeys from \"./apiKeys\";\r\nimport Clock from \"react-live-clock\";\r\nimport Forcast from \"./forcast\";\r\nimport loader from \"./images/WeatherIcons.gif\";\r\nimport ReactAnimatedWeather from \"react-animated-weather\";\r\nimport { defaults, dateBuilder } from \"./currentLocation\";\r\n\r\nexport class Weather extends React.Component {\r\n  state = {\r\n    lat: undefined,\r\n    lon: undefined,\r\n    errorMessage: undefined,\r\n    temperatureC: undefined,\r\n    temperatureF: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    icon: \"CLEAR_DAY\",\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    errorMsg: undefined,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      this.getPosition()\r\n        //If user allow location service then will fetch data & send it to get-weather function.\r\n        .then((position) => {\r\n          this.getWeather(position.coords.latitude, position.coords.longitude);\r\n        })\r\n        .catch((err) => {\r\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\r\n          this.getWeather(28.67, 77.22);\r\n          alert(\r\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\r\n          );\r\n        });\r\n    } else {\r\n      alert(\"Geolocation not available\");\r\n    }\r\n\r\n    this.timerID = setInterval(\r\n      () => this.getWeather(this.state.lat, this.state.lon),\r\n      600000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  // tick = () => {\r\n  //   this.getPosition()\r\n  //   .then((position) => {\r\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\r\n  //   })\r\n  //   .catch((err) => {\r\n  //     this.setState({ errorMessage: err.message });\r\n  //   });\r\n  // }\r\n  getPosition = (options) => {\r\n    return new Promise(function (resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n  };\r\n  getWeather = async (lat, lon) => {\r\n    const api_call = await fetch(\r\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\r\n    );\r\n    const data = await api_call.json();\r\n    this.setState({\r\n      lat: lat,\r\n      lon: lon,\r\n      city: data.name,\r\n      temperatureC: Math.round(data.main.temp),\r\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\r\n      humidity: data.main.humidity,\r\n      main: data.weather[0].main,\r\n      country: data.sys.country,\r\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\r\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\r\n    });\r\n    switch (this.state.main) {\r\n      case \"Haze\":\r\n        this.setState({ icon: \"CLEAR_DAY\" });\r\n        break;\r\n      case \"Clouds\":\r\n        this.setState({ icon: \"CLOUDY\" });\r\n        break;\r\n      case \"Rain\":\r\n        this.setState({ icon: \"RAIN\" });\r\n        break;\r\n      case \"Snow\":\r\n        this.setState({ icon: \"SNOW\" });\r\n        break;\r\n      case \"Dust\":\r\n        this.setState({ icon: \"WIND\" });\r\n        break;\r\n      case \"Drizzle\":\r\n        this.setState({ icon: \"SLEET\" });\r\n        break;\r\n      case \"Fog\":\r\n        this.setState({ icon: \"FOG\" });\r\n        break;\r\n      case \"Smoke\":\r\n        this.setState({ icon: \"FOG\" });\r\n        break;\r\n      case \"Tornado\":\r\n        this.setState({ icon: \"WIND\" });\r\n        break;\r\n      default:\r\n        this.setState({ icon: \"CLEAR_DAY\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.temperatureC) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"city\">\r\n            <div className=\"title\">\r\n              <h2>{this.state.city}</h2>\r\n              <h3>{this.state.country}</h3>\r\n            </div>\r\n            <div className=\"mb-icon\">\r\n              {\" \"}\r\n              <ReactAnimatedWeather\r\n                icon={this.state.icon}\r\n                color={defaults.color}\r\n                size={defaults.size}\r\n                animate={defaults.animate} />\r\n              <p>{this.state.main}</p>\r\n            </div>\r\n            <div className=\"date-time\">\r\n              <div className=\"dmy\">\r\n                <div id=\"txt\"></div>\r\n                <div className=\"current-time\">\r\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\r\n                </div>\r\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\r\n              </div>\r\n              <div className=\"temperature\">\r\n                <p>\r\n                  {this.state.temperatureC}°<span>C</span>\r\n                </p>\r\n                {/* <span className=\"slash\">/</span>\r\n                    {this.state.temperatureF} &deg;F */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Forcast icon={this.state.icon} weather={this.state.main} />\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\r\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\r\n            Detecting your location\r\n          </h3>\r\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\r\n            Your current location wil be displayed on the App <br></br> & used\r\n            for calculating Real time weather.\r\n          </h3>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}